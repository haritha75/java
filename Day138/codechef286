class Stack {
    private int maxSize;
    private int[] stackArray;
    private int top;

    public Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1;
    }

    public void push(int item) {
        if (top < maxSize - 1) {
            stackArray[++top] = item;
            System.out.println("Pushed: " + item);
        } else {
            System.out.println("Stack is full. Cannot push: " + item);
        }
    }

    public int pop() {
        if (!isEmpty()) {
            int item = stackArray[top--];
            System.out.println("Popped: " + item);
            return item;
        } else {
            System.out.println("Stack is empty. Cannot pop.");
            return -1; // Return a default value to indicate an empty stack
        }
    }

    public int peek() {
        if (!isEmpty()) {
            int item = stackArray[top];
            System.out.println("Peeked: " + item);
            return item;
        } else {
            System.out.println("Stack is empty. Cannot peek.");
            return -1; // Return a default value to indicate an empty stack
        }
    }

    public boolean isEmpty() {
        return top == -1;
    }
}

class StackDemo {
    public static void main(String[] args) {
        Stack stack = new Stack(5); // Create a stack with a maximum size of 5

        stack.push(1);
        stack.push(2);
        stack.push(3);

        stack.peek(); // Peek at the top element

        stack.pop(); // Pop the top element
        stack.pop();
        stack.pop();
        stack.pop(); // Attempt to pop from an empty stack

        stack.peek(); // Attempt to peek at an empty stack
    }
}

