import java.util.Scanner;

class Stack {
    private int maxSize;
    private char[] stackArray;
    private int top;

    public Stack(int size) {
        maxSize = size;
        stackArray = new char[maxSize];
        top = -1;
    }

    public void push(char item) {
        if (top < maxSize - 1) {
            stackArray[++top] = item;
        }
    }

    public char pop() {
        if (!isEmpty()) {
            return stackArray[top--];
        }
        return ' ';
    }

    public char peek() {
        if (!isEmpty()) {
            return stackArray[top];
        }
        return ' ';
    }

    public boolean isEmpty() {
        return top == -1;
    }
}

class InfixToPostfixConverter {
    public static String infixToPostfix(String infix) {
        StringBuilder postfix = new StringBuilder();
        Stack operatorStack = new Stack(infix.length());

        // Define operator precedence
        int precedence = 0;

        for (char c : infix.toCharArray()) {
            switch (c) {
                case '+':
                case '-':
                    precedence = 1;
                    break;
                case '*':
                case '/':
                    precedence = 2;
                    break;
                case '^':
                    precedence = 3;
                    break;
                default:
                    precedence = 0;
            }

            if (Character.isLetterOrDigit(c)) {
                postfix.append(c);
            } else if (c == '(') {
                operatorStack.push(c);
            } else if (c == ')') {
                while (!operatorStack.isEmpty() && operatorStack.peek() != '(') {
                    postfix.append(operatorStack.pop());
                }
                operatorStack.pop(); // Remove the '('
            } else {
                while (!operatorStack.isEmpty() && precedence <= getPrecedence(operatorStack.peek())) {
                    postfix.append(operatorStack.pop());
                }
                operatorStack.push(c);
            }
        }

        while (!operatorStack.isEmpty()) {
            postfix.append(operatorStack.pop());
        }

        return postfix.toString();
    }

    private static int getPrecedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
            default:
                return 0;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        scanner.nextLine(); // Consume the newline

        while (t-- > 0) {
            String infixExpression = scanner.nextLine();
            String postfixExpression = infixToPostfix(infixExpression);
            System.out.println(postfixExpression);
        }
    }
}

